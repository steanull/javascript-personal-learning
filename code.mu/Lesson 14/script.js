"use strict"
/*
    Автоматическое преобразование типов данных.
    Как вы уже знаете, строки в JS следует брать в кавычки.
    Может быть такое, что всеми символами строки будут являться цифры:
 */

let a = '123';

/*
    В этом случае переменная a также является строкой, но с некоторым нюансом.
    Суть нюанса в следующем: если над строкой с цифрами выполнить какую-либо математическую операцию -
    эта операция будет выполнена так, будто у нас действительно числа, а не строки:
 */

alert('2' * '3'); // Выведет 6

/*
    В данном случае JS видит, что мы пытаемся выполнить недопустимую для строк, но допустимую для чисел операцию.
    Он также видит, что фактически наши строки - это числа в кавычках.
    Поэтому JS автоматически выполняет преобразование этих строк к числам и выполняет соответствующую
    математическую операцию над ними.
    Такое работает, если в наших строках только цифры.
    Если там будет хотя бы одна буква - JS посчитает операцию некорректной и сделает ее результатом значение NaN:
 */

alert('2' * '3s'); // Выведет NaN

/*
    Кроме того, автоматическое преобразование происходит, если операция математически корректна, но не допустима для строк.
    Например, строки нельзя (а число можно) умножить, делить, вычитать, поэтому во всех таких операциях будет автоматическое
    преобразование строк с цифрами в числа.
    Однако, строки, как и числа, складываются с помощью оператора +.
    Это значит, что в случае сложения автоматического преобразования не будет:
 */

let a1 = '1' + '2';
alert(a1); //Выведет 12 - произошло сложение строк (конкатенация)

// Если одно из слагаемых число, а другое - стока, то всегда побеждает строка:

let a2 = 1 + '2';
alert(a2); // Выведет 12

/*
    В таких случаях JS, наоборот, автоматически преобразует числа в строки и выполняет сложение строк.
    Есть, однако, нюансы, когда слагаемых больше, чем два: в этом случае преобразование к определенному типу
    зависит от порядка выполнения операций.
    В следующем примере вначале 2 и 3 сложатся как числа, а затем результат прибавится к строке "1" уже как строка
    "5", что в итоге даст строку "15"
 */

let a3 = '1' + (2 + 3);
alert(a3); // Выведет "15"

/*
    Если же убрать скобки, то все будет складываться слева направо.
    То есть сначала к строке 1 прибавится число 2 и в результате получится 12.
    Затем к этой строке прибавится число 3 и в результате получится строка 123:
 */

let a4 = '1' + 2 + 3;
alert(a4); // Выведет 123

/*
    А вот в следующем примере числа 2 и 3 написаны в начале, поэтому сначала они сложатся как числа, дав в
    результате число 5, а затем к этому числу прибавится строка 1, дав в итоге строку 51:
 */

let a5 = 2 + 3 + '1';
alert(a5); // Выведет 51

let a6 = '5' + '2';
console.log(a6); //52

let a7 = '5' + 2;
console.log(a7); //52

let a8 = 5 + '2';
console.log(a8); // 52

let a9 = 5 + 2;
console.log(a9) //7

let a10 = '5' * '2';
console.log(a10);//10

let a11 = '5' - '2';
console.log(a11); //3

let a12 = '5' / '2';
console.log(a12) // 2.5

let a13 = '5' % '2';
console.log(a13);//1

let a14 = '5s' * '2';
console.log(a14); //NaN

let a15 = '5s' + '2';
console.log(a15); //5s2

let a16 = (-'5') + (-'2');
console.log(a16); //-7

let a17 = '5' * 1 + '2' * 1;
alert(a17); //7

let a18 = '5' * '1' + '2' * '1';
console.log(a18); //7

let a19 = '' + 3 + 1;
console.log(a19); //'31'